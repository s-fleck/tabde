% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tabde-package.R, R/tabde.R
\docType{package}
\name{tabde-package}
\alias{tabde}
\alias{tabde-package}
\alias{table_design}
\alias{table_design_fwf}
\alias{table_design_sql}
\alias{tabde_fwf}
\alias{tabde_sql}
\title{tabde: Define and Check The Structure of Data Frames and
    Database Tables}
\usage{
tabde(
  col_name,
  col_type = rep(NA_character_, length(col_name)),
  col_domain = NULL,
  ...
)

tabde_fwf(
  col_name,
  col_type = rep(NA_character_, length(col_name)),
  fwf_start,
  fwf_end,
  col_domain = NULL,
  ...
)

tabde_sql(
  col_name,
  col_type = rep(NA_character_, length(col_name)),
  sql_type = rep(NA_character_, length(col_name)),
  sql_opts = rep(NA_character_, length(col_name)),
  col_domain = NULL,
  ...,
  .constraints = NULL
)
}
\arguments{
\item{col_name}{\code{character} vector. column names}

\item{col_type}{\code{character} vector. Valid \code{data.frame} column types. \code{NA}s
and the string \code{"#skip"} have special meanings.

\code{NA}s will be converted to \code{readr::col_guess()} by \code{\link[=as_col_spec]{as_col_spec()}} and
\code{\link[=matches_tabde]{matches_tabde()}} will not check the classes of \code{NA} columns. In a similar
fashion \verb{#skip} columns will be converted to \code{readr::col_skip()} and
\code{matches_tabde} will not check if they are present in \code{dat} or not.}

\item{col_domain}{\code{character} vector. A valid domain for \code{col_name}. Domains
can be used by \code{\link[=matches_tabde]{matches_tabde()}} and \code{\link[=as_sql]{as_sql()}} to check for valid
(discrete) values if a \code{\link{values}} Object is passed to these functions.}

\item{...}{passed on to methods}

\item{fwf_start}{\code{integer} vector. fwf start positions}

\item{fwf_end}{\code{integer} vector. fwf end positions}

\item{sql_type}{\code{character} vector. SQL Data Types as supported by target
DBMS System. Columns with col_type \code{NA} will be skipped when creating
SQL statements.}

\item{sql_opts}{\code{character} vector. SQL Options to be used by \code{\link[=as_sql]{as_sql()}}
(for example \verb{NOT NULL})}

\item{.constraints}{a \code{\link[=tabde_constraints]{tabde_constraints()}} \code{data.frame}}
}
\value{
a \code{data.frame} of class \code{table_design}
}
\description{
Define the structure (column names and types)
    of tables and save them as csv files. Tools are provided to use such
    table design to create database tables, read fwf and csv files, and
    check data.frames for validity.

Table designs are \code{data.frames} that contain meta-info on other \code{data.frames}
such as column names and types. Such \code{table_designs} can be used for
validating the structure of \code{data.frames}, generating \code{SQL} code, reading
files, etc...
}
\section{Database constraints}{


A table design can contain a \code{\link[=tabde_constraints]{tabde_constraints()}} object that
represents database constraints (such as \emph{primary key}) as the attribute
\code{'constraints'}. If such an attribute is present, \code{\link[=as_sql]{as_sql()}} will use it
when transforming a table design to an SQL \verb{CREATE TABLE} statement.
}

\section{Storing table_designs}{


\code{table_desings} are designed to be stored as \code{.csv} files. This has some
disadvantages over storing them in a binary format such as \code{.rds} or \code{.rda},
but makes it easy to edit them and track changes in a VCS such as git.
}

\examples{
tabde_sql(
   col_name = c("first_name", "last_name", "age"),
   col_type = c("character", "character", "integer"),
   sql_type = c("varchar(255)", "varchar(255)", "integer"),
    .constraints = tabde_constraints(
      "person_pk",
      "primary key",
      list(c("first_name", "last_name"))
    )
 )
}
\seealso{
\itemize{
\item validate \code{data.frames} with \code{\link[=matches_tabde]{matches_tabde()}}
\item read csv files with \code{\link[=td_fread]{td_fread()}}
\item generate SQL with \link{as_sql}
\item \href{https://github.com/s-fleck/shed}{shed}: An experimental csv editor
implemented in shiny
}
}
\author{
\strong{Maintainer}: Stefan Fleck \email{stefan.b.fleck@gmail.com}

}
\keyword{internal}
