% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matches_tabde.R
\name{matches_tabde}
\alias{matches_tabde}
\title{Check If a Data Frame Matches a Table Design}
\usage{
matches_tabde(x, table_design, skip = "#skip", values = NULL,
  check_nulls = FALSE)
}
\arguments{
\item{x}{a \code{data.frame}}

\item{table_design}{a \link{table_design}}

\item{skip}{\code{character} vector. Columns where the \code{col_type} in
\code{table_design} matches any of the strings in \code{skip} will not be checked.
see also \code{\link[=as_col_spec]{as_col_spec()}}}

\item{values}{a \link{values} Object. If \code{x} contains a \code{col_domain} column,
valid values for each domain are looked up in \code{values}}

\item{check_nulls}{\code{logical}. If set to \code{TRUE} and \code{table_design} is a
\link{table_design_sql} with an \code{"sql_opts"} column, this checks if \code{NOT NULL}
columns contain NA}
}
\value{
\code{logical} scalar
}
\description{
If a columns has the \code{col_type} \code{NA} in the \code{table_design}, it will
be checked if the column is present in \code{x}, but the column type can be
arbitrary.
}
\details{
If used with \pkg{assertthat}, \code{matches_tabde()} produces verbose error
messages.
}
\examples{
td <- get_tabde(iris)

matches_tabde(iris, td)
matches_tabde(cars, td)

# Nice error messages with assertthat
if (requireNamespace("assertthat", quietly = TRUE)){
  try(assertthat::assert_that(matches_tabde(cars, td)))
}


td <- get_tabde_sql(iris)
td$sql_opts <- "NOT NULL"
x <- iris
x$Species[1] <- NA

matches_tabde(x, td)
matches_tabde(x, td, check_nulls = TRUE)

# Nice error messages with assertthat
if (requireNamespace("assertthat", quietly = TRUE)){
  try(assertthat::assert_that(matches_tabde(x, td, check_nulls = TRUE)))
}

}
